################################
### Base image #################
################################
FROM ubuntu:22.04 AS aptpackages

# Image metadata
LABEL maintainer="alejandro@dpella.io"
LABEL version="0.2"
LABEL description="GHC for development"

# Set the timezone so apt-get doesn't ask for it later
ENV TZ=Europe/Stockholm
ENV WORKINGDIR=/root
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

WORKDIR ${WORKINGDIR}

# Install all systems packages in one 
RUN apt-get update \ 
  && \
    apt-get install -y --no-install-recommends \
	  # Base utilities 
    software-properties-common sudo ssh git wget curl make lzma \ 
	  # Development tools 
    libnuma-dev zlib1g-dev libgmp-dev libgmp10 liblzma-dev gcc \
	  autoconf automake gpg dirmngr build-essential lsb-release gnupg2 socat \ 
	  # Shell  
	  powerline less \
	  # Neovim utilities 
	  trash-cli tldr bat coreutils unzip locales npm ripgrep dbus-x11 openjdk-11-jdk \
	  fd-find luarocks \
	  # Tmux 
	  tmux inetutils-ping \
	  # Python tools
	  pip python3.10-venv \
	  # PDF and graphics 
	  pdftk evince inkscape \
	  # Clipboard docker to WSL 
	  xclip \
	  # Modern df (duf) 
	  duf \
  && \
    (echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | debconf-set-selections) \
  && \ 
    apt-get install -y --no-install-recommends \
	  # LaTeX packages 
	  texlive-xetex zathura latexmk texlive-luatex ttf-mscorefonts-installer texlive-science \
	  texlive-extra-utils texlive-bibtex-extra python3-pygments biber texlive-fonts-extra lhs2tex \
  && \
	  # Setting up SSH
	  mkdir ~/.ssh && touch ~/.ssh/known_hosts && ssh-keyscan github.com >> ~/.ssh/known_hosts \
  && \
    # Cleaning 
	  apt-get clean && rm -rf /var/lib/apt/lists/* 

# Local configurations 
RUN locale-gen en_US.UTF-8 && update-locale
ENV LANG=en_US.UTF-8

# VIM motions in bash 
RUN echo "set -o vi" >> ${WORKINGDIR}/.bashrc

# Loading key for github, etc.
RUN echo 'eval $(ssh-agent)' >> ${WORKINGDIR}/.bashrc
RUN echo '/usr/bin/ssh-add /root/.ssh/key' >> ${WORKINGDIR}/.bashrc 

################################
### Modern CLI tools ###########
################################
FROM aptpackages AS utils-cli 

# Modern tools 
RUN \
		# Autocomplete 
		echo "deb [trusted=yes] https://apt.fury.io/rsteube/ /" | sudo tee /etc/apt/sources.list.d/rsteube.list && \
		apt-get update && apt-get install carapace-bin && \
		echo "export CARAPACE_BRIDGES='zsh,fish,bash,inshellisense'" >> ${WORKINGDIR}/.bashrc && \
		echo "source <(carapace _carapace)" >> ${WORKINGDIR}/.bashrc \
	&& \
		# Modern PS (btm) 
		curl -LO https://github.com/ClementTsang/bottom/releases/download/0.10.2/bottom_0.10.2-1_amd64.deb && \ 
		dpkg -i bottom_0.10.2-1_amd64.deb && \ 
		rm bottom_0.10.2-1_amd64.deb \
	&& \ 
		# Modern du (dust)
		curl -LO https://github.com/bootandy/dust/releases/download/v1.2.0/du-dust_1.2.0-1_amd64.deb && \
		dpkg -i du-dust_1.2.0-1_amd64.deb && \ 
		rm du-dust_1.2.0-1_amd64.deb \
	&& \ 
		# Eza (modern ls)
		mkdir -p /etc/apt/keyrings && \
		(wget -qO- https://raw.githubusercontent.com/eza-community/eza/main/deb.asc | gpg --dearmor -o /etc/apt/keyrings/gierens.gpg) && \ 
		echo "deb [signed-by=/etc/apt/keyrings/gierens.gpg] http://deb.gierens.de stable main" | sudo tee /etc/apt/sources.list.d/gierens.list && \ 
		chmod 644 /etc/apt/keyrings/gierens.gpg /etc/apt/sources.list.d/gierens.list && \ 
		apt update && apt install -y eza && \ 
		echo "alias ls='eza --icons --git -a'" >> ${WORKINGDIR}/.bashrc && \ 
		echo "alias ll='eza -l --icons --git -a'" >> ${WORKINGDIR}/.bashrc \
	&& \
    # Fuzzy finder 
    git clone --depth 1 https://github.com/junegunn/fzf.git ${WORKINGDIR}/.fzf && \ 
    cd ${WORKINGDIR}/.fzf && ./install --all && cd ${WORKINGDIR} \
  && \
    # Lazygit (visual aid for git)
    (curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*' > version) && \ 
  	echo -n 'curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_' > cmd && \
  	echo -n $(cat version) >> cmd && \
  	echo -n '_Linux_x86_64.tar.gz"' >> cmd && \
  	(cat cmd | /bin/sh) && \
  	tar xf lazygit.tar.gz lazygit && \ 
  	install lazygit /usr/local/bin && \
  	rm -f cmd lazygit lazygit.tar.gz version \
  && \ 
    # Tmux plugins
    git clone https://github.com/tmux-plugins/tpm ${WORKINGDIR}/.tmux/plugins/tpm 

############################################## 
# Powerline + Fuzzy Finder configuration
############################################## 
# Copy activation lines for powerfile 
COPY ./otherfiles/powerline ${WORKINGDIR}
# Two lines  
COPY ./otherfiles/default.twolines.json ${WORKINGDIR}
# Activate powerline 
RUN \ 
	cat ${WORKINGDIR}/powerline >> ${WORKINGDIR}/.bashrc && rm  ${WORKINGDIR}/powerline  
# Activate two lines powerline 
RUN mv ${WORKINGDIR}/default.twolines.json /usr/share/powerline/config_files/themes/shell
RUN sed -i 's/default_leftonly/default.twolines/g' /usr/share/powerline/config_files/config.json
RUN echo "alias less='batcat -p'" >> ${WORKINGDIR}/.bashrc 
# Fuzzy find filer
COPY ./otherfiles/fzf ${WORKINGDIR}
RUN cat ${WORKINGDIR}/fzf >> ${WORKINGDIR}/.bashrc && rm ${WORKINGDIR}/fzf 

############################################## 
# Git + Lazygit configutarion 
############################################## 
COPY ./ssh/gituser ${WORKINGDIR} 
RUN cat ${WORKINGDIR}/gituser >> ${WORKINGDIR}/.bashrc 
RUN rm -f ${WORKINGDIR}/gituser 

############################################## 
# Tmux configuration
############################################## 
COPY ./otherfiles/.tmux.conf ${WORKINGDIR}
# Copy the entrypoint script and make it the container's entrypoint
COPY ./otherfiles/entrypoint.sh /bin/entrypoint
RUN chmod +x /bin/entrypoint
# Configuration of plugins
RUN tmux start-server && \
    tmux new-session -d && \
    sleep 1 && \
    ~/.tmux/plugins/tpm/scripts/install_plugins.sh && \
    tmux kill-server

# FZF keyshort 
RUN echo 'eval "$(fzf --bash)"' >> ${WORKINGDIR}/.bashrc

################################
### NeoVim #####################
################################
FROM utils-cli AS neovim 

# NVM (required by NeoVim) 
ENV NVM_DIR=/root/.nvm
ENV NODE_VERSION=18
# Make node, npm, and tree-sitter available globally
ENV PATH="$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH"
# NeoVim 
ENV NVIM="nvim-linux-x86_64"

# Install NVM and Node.js (required for NeoVim)
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash 
RUN . "$NVM_DIR/nvm.sh" && nvm install $NODE_VERSION && nvm alias default $NODE_VERSION && \
	nvm use $NODE_VERSION && npm install -g tree-sitter-cli 

# Install luarocks 
RUN luarocks install jsregexp 

# Install NeoVim 
RUN curl -LO https://github.com/neovim/neovim/releases/download/v0.11.0/${NVIM}.tar.gz && rm -rf /opt/nvim 
RUN tar -C /opt -xzf ${WORKINGDIR}/${NVIM}.tar.gz && rm ${WORKINGDIR}/${NVIM}.tar.gz 
RUN echo 'export PATH="$PATH:/opt/${NVIM}/bin"' >> ${WORKINGDIR}/.bashrc 
# NvChad 
RUN git clone https://github.com/NvChad/starter ${WORKINGDIR}/.config/nvim

############################################## 
# Configuration for NvChad 
############################################## 
# Top-level init
COPY ./otherfiles/top-init.lua   ${WORKINGDIR}/.config/nvim/init-add.lua
RUN cat ${WORKINGDIR}/.config/nvim/init-add.lua >> ${WORKINGDIR}/.config/nvim/init.lua
RUN rm -f ${WORKINGDIR}/.config/nvim/init-add.lua
# Options
COPY ./otherfiles/options.lua    ${WORKINGDIR}/.config/nvim/lua/
# Autoformatting 
COPY ./otherfiles/conform.lua    ${WORKINGDIR}/.config/nvim/lua/configs/
# Plugins
COPY ./otherfiles/init.lua       ${WORKINGDIR}/.config/nvim/lua/plugins/
# Key bindings
COPY ./otherfiles/mappings.lua   ${WORKINGDIR}/.config/nvim/lua/
# LSP Config (key bindings)
COPY ./otherfiles/lspconfig.lua  ${WORKINGDIR}/.config/nvim/lua/configs/
# Look of NvChad
COPY ./otherfiles/chadrc.lua     ${WORKINGDIR}/.config/nvim/lua/
# Options per kind of files 
RUN mkdir ${WORKINGDIR}/.config/nvim/lua/custom/
COPY ./otherfiles/autocmds.lua ${WORKINGDIR}/.config/nvim/lua/custom/
# External Nvim tools
RUN \
    # Installing plugins NEOVIM  
    /opt/${NVIM}/bin/nvim -c "silent! PlugInstall" +qall \
  && \ 
    # Installing language servers and formatters NEOVIM 
    /opt/${NVIM}/bin/nvim --headless +"MasonUpdate" +q && \
    /opt/${NVIM}/bin/nvim --headless +"MasonInstall marksman stylua lua-language-server prettier@2.8.8" +q && \
    /opt/${NVIM}/bin/nvim --headless +"MasonInstall ltex-ls texlab" +q && \
    # Haskell code formatter 
    /opt/${NVIM}/bin/nvim --headless +"MasonInstall fourmolu" +q 

# File format options for Haskell code 
COPY ./otherfiles/fourmolu.yaml  ${WORKINGDIR}
RUN mv ${WORKINGDIR}/fourmolu.yaml ${WORKINGDIR}/.local/share/nvim/mason/bin/

# CodeCompanion (AI assistant) in NVIM 
RUN echo 'export XDG_RUNTIME_DIR=/tmp' >> ${WORKINGDIR}/.bashrc

################################
### MkDocs #####################
################################
FROM neovim AS mkdocs 

RUN \
  pip install --upgrade Pygments && \
  pip install pymdown-extensions && \
  pip install mkdocs

#Tools for Python development 
RUN pip install scipy 

################################
### Haskell ####################
################################
FROM mkdocs AS haskell 

# Haskell 
ENV BOOTSTRAP_HASKELL_NONINTERACTIVE=1
ENV PATH="${WORKINGDIR}/.ghcup/bin:$PATH"
ENV PATH=$PATH:${WORKINGDIR}/.cabal/bin
RUN \ 
	  # Haskell 
	  (curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh) \ 
  && \
    ghcup install ghc 9.6.7 && ghcup set ghc 9.6.7 \
  && \ 
   # Cabal 
    ghcup install cabal 3.10.1.0 && ghcup set cabal 3.10.1.0 \
  && \
   # Haskell HLS
    ghcup install hls 2.10.0.0 && ghcup set hls 2.10.0.0 \
  && \
    # Haskell fast tags 
    cabal install fast-tags 

# Hoogle 
# The way to do it should be like this: RUN cabal install hoogle 
# Hoogle has currently a bug so we need to install it from the repo

RUN \
	git clone https://github.com/ndmitchell/hoogle.git && cd hoogle && cabal install && \
	hoogle generate && rm -fr hoogle && cd ${WORKINGDIR} 

################################
### AI #########################
################################
FROM haskell AS ai 

# Claude code 
RUN npm install -g @anthropic-ai/claude-code


ENTRYPOINT [ "/bin/entrypoint" ]

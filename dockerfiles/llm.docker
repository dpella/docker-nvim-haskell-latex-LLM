# Base the image on Ubuntu 20.04 
FROM ubuntu:22.04 

# Image metadata
LABEL maintainer="alejandro@dpella.io"
LABEL version="0.2"
LABEL description="LLMs - Ollama + Open WebUI"

# Set the timezone so apt-get doesn't ask for it later
ENV TZ=Europe/Stockholm
ENV WORKINGDIR=/root
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

##
# Auxiliaries files for configuration of utilities  
##

# Copy activation lines for powerfile 
COPY ./otherfiles/powerline ${WORKINGDIR}

# Two lines  
COPY ./otherfiles/default.twolines.json ${WORKINGDIR}

# FZF 
COPY ./otherfiles/fzf ${WORKINGDIR}

# Install base system utilities and dependencies
RUN apt-get update \ 
    && \
    apt-get install -y --no-install-recommends \
         software-properties-common \ 
         sudo \ 
         ssh  \
         git  \
         wget \ 
         curl \ 
         make \ 
         lzma \ 
         libnuma-dev \
         zlib1g-dev \
	 libgmp-dev \
	 libgmp10 \
         liblzma-dev \ 
	 gcc \
	 autoconf \
	 automake \
	 gpg \
         dirmngr \
	 build-essential \
       	 lsb-release \
         gnupg2 \ 
	 socat  

RUN apt-get update \
    && \
    apt-get install -y \
        powerline \ 
        less \
    && \ 
    mkdir ~/.ssh \ 
    && \
    touch ~/.ssh/known_hosts \
    && \ 
    ssh-keyscan github.com >> ~/.ssh/known_hosts 
 
##
# Configuration of terminal 
## 

# Weather in ASCII :)
RUN echo "weather() { curl wttr.in/$@; }" >> ${WORKINGDIR}/.bashrc

# Activate powerline 
RUN cat ${WORKINGDIR}/powerline >> ${WORKINGDIR}/.bashrc && rm ${WORKINGDIR}/powerline 

# Activate two lines powerline 
RUN mv ${WORKINGDIR}/default.twolines.json /usr/share/powerline/config_files/themes/shell
RUN sed -i 's/default_leftonly/default.twolines/g' /usr/share/powerline/config_files/config.json

RUN echo "alias less=batcat" >> ${WORKINGDIR}/.bashrc 
RUN echo 'eval $(ssh-agent)' >> ${WORKINGDIR}/.bashrc

# Fuzzy find filer
RUN git clone --depth 1 https://github.com/junegunn/fzf.git ${WORKINGDIR}/.fzf

WORKDIR ${WORKINGDIR}/.fzf

RUN ./install --all  

RUN cat ${WORKINGDIR}/fzf >> ${WORKINGDIR}/.bashrc && rm ${WORKINGDIR}/fzf 

WORKDIR ${WORKINGDIR}

## Config GIT 
RUN echo '/usr/bin/ssh-add /root/.ssh/key' >> ${WORKINGDIR}/.bashrc
COPY ./ssh/gituser ${WORKINGDIR} 
RUN cat ${WORKINGDIR}/gituser >> ${WORKINGDIR}/.bashrc 
RUN rm -f ${WORKINGDIR}/gituser 

## AI LLM 
RUN curl -fsSL https://ollama.com/install.sh | sh

RUN apt-get update \ 
    && \
    apt-get install -y --no-install-recommends \
	locales
 
# Locale 
RUN locale-gen en_US.UTF-8
RUN update-locale
ENV LANG=en_US.UTF-8

##
# Clipboard from docker into WSL 
##
RUN apt-get update && apt-get install -y xclip 

## Setting up OLLAMA
COPY ./ssh/llm ${WORKINGDIR}


## Screen for connecting to OLLAMA
RUN bash -c 'echo "#/bin/bash > /root/llm.sh" ; source /root/llm ; if [[ $LLM_MODE -eq 0 ]]; then echo "ollama serve & sleep 10 && ollama pull mistral:instruct" >> /root/llm.sh; else echo ssh -o \"StrictHostKeyChecking no\" -N -L ${LLM_PORT}:${LLM_SERVER}:${LLM_PORT} ${SSH_USER}@${LLM_SERVER} -p ${SSH_PORT} \& >> /root/llm.sh ; fi' 

RUN bash -c 'source /root/llm ; echo "export OLLAMA_HOST=\"127.0.0.1:${LLM_PORT}\" " >> /root/llm.sh'
RUN bash -c 'chmod oug+x ./llm.sh'

## WebUI Script 
RUN bash -c 'echo "#/bin/bash > /root/web.sh"'  
RUN bash -c 'source /root/llm ; if [[ $LLM_MODE -eq 1 ]]; then echo "export OLLAMA_BASE_URL=http://127.0.0.1:${LLM_PORT}" >> /root/web.sh; fi >> /root/web.sh'
RUN bash -c 'chmod oug+x ./web.sh'

RUN rm -f ./llm

# Tmux 
RUN apt-get update && apt-get install -y tmux 
RUN git clone https://github.com/tmux-plugins/tpm ${WORKINGDIR}/.tmux/plugins/tpm
COPY ./otherfiles/.tmux.conf ${WORKINGDIR}

# Copy the entrypoint script and make it the container's entrypoint
COPY ./otherfiles/entrypoint.sh /bin/entrypoint
RUN chmod +x /bin/entrypoint

RUN tmux start-server && \
    tmux new-session -d && \
    sleep 1 && \
    ~/.tmux/plugins/tpm/scripts/install_plugins.sh && \
    tmux kill-server

# Needed for tmux plugins 
RUN apt-get update && apt-get install -y inetutils-ping

##
# WebOpen UI (LLM Web interface)
##
RUN apt-get update && apt-get install -y \ 
	python3.11 \
	python3-pip 

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 2
#RUN update-alternatives --config python3
RUN update-alternatives --set python3 /usr/bin/python3.11
RUN pip install open-webui 

ENTRYPOINT [ "/bin/entrypoint" ]
